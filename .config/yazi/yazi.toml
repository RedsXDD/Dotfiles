# vim:fileencoding=utf-8:foldmethod=marker:foldenable

# -------------------------- #

# ██╗   ██╗ █████╗ ███████╗██╗
# ╚██╗ ██╔╝██╔══██╗╚══███╔╝██║
#  ╚████╔╝ ███████║  ███╔╝ ██║
#   ╚██╔╝  ██╔══██║ ███╔╝  ██║
#    ██║   ██║  ██║███████╗██║
#    ╚═╝   ╚═╝  ╚═╝╚══════╝╚═╝

# -------------------------- #

#: Manager {{{
[manager]
ratio          = [ 1, 3, 4 ]
sort_by        = "natural"
sort_sensitive = false
sort_reverse 	 = false
sort_dir_first = true
sort_translit  = false
linemode       = "size"
show_hidden    = true
show_symlink   = true
scrolloff      = 8
mouse_events   = [ "click", "scroll" ]
title_format   = "Yazi: {cwd}"
#: }}}
#: Preview {{{
[preview]
wrap            = "yes"
tab_size        = 1
max_width       = 1000
max_height      = 900
cache_dir       = "~/.cache/yazi"
image_delay     = 30
image_filter    = "triangle"
image_quality   = 50
sixel_fraction  = 15
ueberzug_scale  = 1
ueberzug_offset = [ 0, 0, 0, 0 ]
#: }}}
#: Opener {{{
[opener]
edit = [ { run = '${EDITOR:=vi} "$@"', desc = "$EDITOR", block = true, for = "unix" } ]
open = [
  { run = 'xdg-open "$1"',    desc = "Open", for = "linux" },
  { run = 'termux-open "$1"', desc = "Open", for = "android" },
]
reveal = [
  { run = 'xdg-open "$(dirname "$1")"',           desc = "Reveal", for = "linux" },
  { run = 'termux-open "$(dirname "$1")"',        desc = "Reveal", for = "android" },
  { run = '''exiftool "$1"; echo "Press enter to exit"; read _''', block = true, desc = "Show EXIF", for = "unix" },
]
extract = [
	# { run = 'ya pub extract --list "$@"', desc = "Extract here", for = "unix" },
  { run = 'ouch d -y "$@"', desc = "Extract here with ouch", for = "unix" },
]
play = [
	{ run = 'mpv --force-window "$@"', orphan = true, for = "unix" },
	{ run = '''mediainfo "$1"; echo "Press enter to exit"; read _''', block = true, desc = "Show media info", for = "unix" },
]

[open]
rules = [
	{ name = "*/",               use = [ "edit", "open", "reveal" ] }, # Folder.
	{ mime = "text/*",           use = [ "edit", "reveal" ] }, # General text.

  # Json files.
	{ mime = "application/{json,ndjson}", use = [ "edit", "reveal" ] },
	{ mime = "*/javascript",     use = [ "edit", "reveal" ] }, # Javascript files.

  # Image/audio/video files.
	{ mime = "image/*",         use = [ "open", "reveal" ] },
	{ mime = "{audio,video}/*", use = [ "play", "reveal" ] },

	{ mime = "application/{zip,rar,7z*,tar,gzip,xz,zstd,bzip*,lzma,compress,archive,cpio,arj,xar,ms-cab*}", use = [ "extract", "reveal" ] }, # Archive files.

  # Empty files.
	{ mime = "inode/x-empty",    use = [ "edit", "reveal" ] },
	{ mime = "inode/empty",      use = [ "edit", "reveal" ] },

	{ mime = "*", use = [ "open", "reveal" ] }, # Others files.
]
#: }}}
#: Tasks {{{
[tasks]
micro_workers    = 10
macro_workers    = 10
bizarre_retry    = 3
image_alloc      = 536870912  # 512MB
image_bound      = [ 0, 0 ]
suppress_preload = false
#: }}}
#: Plugins {{{
[plugin]
prepend_fetchers = [
  { id = "git", name = "*",  run  = "git" },
  { id = "git", name = "*/", run  = "git" },
]
fetchers = [
	# Mimetype
	{ id = "mime", name = "*", run = "mime", if = "!mime", prio = "high" },
]
spotters = [
  # Folders.
	{ name = "*/", run = "folder" },

	# Code.
	{ mime = "text/*", run = "code" },
	{ mime = "*/{xml,javascript,wine-extension-ini}", run = "code" },

	# Image.
	{ mime = "image/{avif,hei?,jxl,svg+xml}", run = "magick" },
	{ mime = "image/*", run = "image" },

	# Video.
	{ mime = "video/*", run = "video" },

	# Fallback.
	{ name = "*", run = "file" },
]
prepend_previewers = [
	{ name = "*.md", run = "glow" },
	{ mime = "application/x-bittorrent", run = "torrent-preview" },
]
append_previewers = [
  { name = "*", run = "hexyl" },
]
preloaders = [
	# Image/audio/video.
	{ mime = "image/{avif,hei?,jxl,svg+xml}", run = "magick" },
	{ mime = "{image,audio,video}/*", run = "allmytoes" },

	# Documents.
	{ mime = "application/{pdf,postscript}", run = "allmytoes" },
	{ mime = "application/{epub+zip,x-mobipocket-ebook,x-fictionbook+xml}", run = "allmytoes" },

	# Font.
	{ mime = "font/*", run = "allmytoes" },
	{ mime = "application/ms-opentype", run = "allmytoes" },
]
previewers = [
  # Folders.
	{ name = "*/", run = "folder", sync = true },

	# Code.
	{ mime = "text/*", run = "code" },
	{ mime = "*/{xml,javascript,wine-extension-ini}", run = "code" },

	# Json.
	{ mime = "application/{json,ndjson}", run = "json" },

	# Image/audio/video.
	{ mime = "image/{avif,hei?,jxl,svg+xml}", run = "magick" },
	{ mime = "{image,audio,video}/*", run = "allmytoes" },

	# Documents.
	{ mime = "application/{pdf,postscript}", run = "allmytoes" },
	{ mime = "application/{epub+zip,x-mobipocket-ebook,x-fictionbook+xml}", run = "allmytoes" },

	# Archives.
	{ mime = "application/{zip,rar,7z*,tar,gzip,xz,zstd,bzip*,lzma,compress,archive,cpio,arj,xar,ms-cab*}", run = "ouch" },
	{ mime = "application/{debian*-package,redhat-package-manager,rpm,android.package-archive}", run = "archive" },
	{ name = "*.{AppImage,appimage}", run = "archive" },

	# Virtual Disk / Disk Image.
	{ mime = "application/{iso9660-image,qemu-disk,ms-wim,apple-diskimage}", run = "archive" },
	{ mime = "application/virtualbox-{vhd,vhdx}", run = "archive" },
	{ name = "*.{img,fat,ext,ext2,ext3,ext4,squashfs,ntfs,hfs,hfsx}", run = "archive" },

	# Font.
	{ mime = "font/*", run = "font" },
	{ mime = "application/ms-opentype", run = "font" },

	# Empty files.
	{ mime = "inode/x-empty", run = "empty" },
	{ mime = "inode/empty", run = "empty" },

	# Fallback.
	{ name = "*", run = "file" },
]
#: }}}
#: Input {{{
[input]
cursor_blink = false

# cd
cd_title  = "Change directory:"
cd_origin = "top-center"
cd_offset = [ 0, 2, 50, 3 ]

# create
create_title  = [ "Create:", "Create (dir):" ]
create_origin = "top-center"
create_offset = [ 0, 2, 50, 3 ]

# rename
rename_title  = "Rename:"
rename_origin = "hovered"
rename_offset = [ 0, 1, 50, 3 ]

# filter
filter_title  = "Filter:"
filter_origin = "top-center"
filter_offset = [ 0, 2, 50, 3 ]

# find
find_title  = [ "Find next:", "Find previous:" ]
find_origin = "top-center"
find_offset = [ 0, 2, 50, 3 ]

# search
search_title  = "Search via {n}:"
search_origin = "top-center"
search_offset = [ 0, 2, 50, 3 ]

# shell
shell_title  = [ "Shell:", "Shell (block):" ]
shell_origin = "top-center"
shell_offset = [ 0, 2, 50, 3 ]
#: }}}
#: Confirm prompts {{{
[confirm]
# Trash.
trash_title 	= "Are you sure you want to move {n} selected file{s} to trash?"
trash_origin	= "center"
trash_offset	= [ 0, 0, 70, 20 ]

# Delete.
delete_title 	= "Are you REALLY SURE you want to PERMANENTLY delete {n} selected file{s}?"
delete_origin	= "center"
delete_offset	= [ 0, 0, 70, 20 ]

# Overwrite.
overwrite_title   = "Are you sure you want to overwrite {n} file{s}?"
overwrite_content = "Will overwrite the following file:"
overwrite_origin  = "center"
overwrite_offset  = [ 0, 0, 50, 15 ]

# Quit.
quit_title   = "Are you sure you want to quit yazi?"
quit_content = "The following tasks are still running, are you sure you want to quit?"
quit_origin  = "center"
quit_offset  = [ 0, 0, 50, 15 ]
#: }}}
#: Pick selector {{{
[pick]
open_title  = "Open with:"
open_origin = "hovered"
open_offset = [ 0, 1, 50, 7 ]
#: }}}
#: Which-key {{{
[which]
sort_by      	 = "none"
sort_sensitive = false
sort_reverse 	 = false
sort_translit  = false
#: }}}
