Special characters
%% A ‘%'.

%) A ‘)'.

Login information
%l The line (tty) the user is logged in on, without ‘/dev/' prefix. If the name starts with ‘/dev/tty', that
prefix is stripped.

%M The full machine hostname.

%m The hostname up to the first ‘.'. An integer may follow the ‘%' to specify how many components of the
hostname are desired. With a negative integer, trailing components of the hostname are shown.

%n $USERNAME.

%y The line (tty) the user is logged in on, without ‘/dev/' prefix. This does not treat ‘/dev/tty' names spe‐
cially.

Shell state
%# A ‘#' if the shell is running with privileges, a ‘%' if not. Equivalent to ‘%(!.#.%%)'. The definition of
‘privileged', for these purposes, is that either the effective user ID is zero, or, if POSIX.1e capabili‐
ties are supported, that at least one capability is raised in either the Effective or Inheritable capabil‐
ity vectors.

%? The return status of the last command executed just before the prompt.

%_ The status of the parser, i.e. the shell constructs (like ‘if' and ‘for') that have been started on the
command line. If given an integer number that many strings will be printed; zero or negative or no integer
means print as many as there are. This is most useful in prompts PS2 for continuation lines and PS4 for
debugging with the XTRACE option; in the latter case it will also work non-interactively.

%ˆ The status of the parser in reverse. This is the same as ‘%_' other than the order of strings. It is often
used in RPS2.

%d %/ Current working directory. If an integer follows the ‘%', it specifies a number of trailing components of
the current working directory to show; zero means the whole path. A negative integer specifies leading
components, i.e. %-1d specifies the first component.

%˜ As %d and %/, but if the current working directory starts with $HOME, that part is replaced by a ‘˜'. Fur‐
thermore, if it has a named directory as its prefix, that part is replaced by a ‘˜' followed by the name of
the directory, but only if the result is shorter than the full path; see Dynamic and Static named directo‐
ries in zshexpn(1).

%e Evaluation depth of the current sourced file, shell function, or eval. This is incremented or decremented
every time the value of %N is set or reverted to a previous value, respectively. This is most useful for
debugging as part of $PS4.

%h
%! Current history event number.

%i The line number currently being executed in the script, sourced file, or shell function given by %N. This
is most useful for debugging as part of $PS4.

%I The line number currently being executed in the file %x. This is similar to %i, but the line number is al‐
ways a line number in the file where the code was defined, even if the code is a shell function.

%j The number of jobs.

%L The current value of $SHLVL.

%N The name of the script, sourced file, or shell function that zsh is currently executing, whichever was
started most recently. If there is none, this is equivalent to the parameter $0. An integer may follow
the ‘%' to specify a number of trailing path components to show; zero means the full path. A negative in‐
teger specifies leading components.

%x The name of the file containing the source code currently being executed. This behaves as %N except that
function and eval command names are not shown, instead the file where they were defined.

%c %. %C Trailing component of the current working directory. An integer may follow the ‘%' to get more than one
component. Unless ‘%C' is used, tilde contraction is performed first. These are deprecated as %c and %C
are equivalent to %1˜ and %1/, respectively, while explicit positive integers have the same effect as for
the latter two sequences.

Date and time
%D The date in yy-mm-dd format.

%T Current time of day, in 24-hour format.

%t %@ Current time of day, in 12-hour, am/pm format.

%* Current time of day in 24-hour format, with seconds.

%w The date in day-dd format.

%W The date in mm/dd/yy format.

%D{string}
string is formatted using the strftime function. See strftime(3) for more details. Various zsh extensions
provide numbers with no leading zero or space if the number is a single digit:

%f a day of the month
%K the hour of the day on the 24-hour clock
%L the hour of the day on the 12-hour clock

In addition, if the system supports the POSIX gettimeofday system call, %. provides decimal fractions of a
second since the epoch with leading zeroes. By default three decimal places are provided, but a number of
digits up to 9 may be given following the %; hence %6. outputs microseconds, and %9. outputs nanoseconds.
(The latter requires a nanosecond-precision clock_gettime; systems lacking this will return a value multi‐
plied by the appropriate power of 10.) A typical example of this is the format ‘%D{%H:%M:%S.%.}'.

The GNU extension %N is handled as a synonym for %9..

Additionally, the GNU extension that a ‘-' between the % and the format character causes a leading zero or
space to be stripped is handled directly by the shell for the format characters d, f, H, k, l, m, M, S and
y; any other format characters are provided to the system's strftime(3) with any leading ‘-' present, so
the handling is system dependent. Further GNU (or other) extensions are also passed to strftime(3) and may
work if the system supports them.

Visual effects
%B (%b)
Start (stop) boldface mode.

%E Clear to end of line.

%U (%u)
Start (stop) underline mode.

%S (%s)
Start (stop) standout mode.

%F (%f)
Start (stop) using a different foreground colour, if supported by the terminal. The colour may be speci‐
fied two ways: either as a numeric argument, as normal, or by a sequence in braces following the %F, for
example %F{red}. In the latter case the values allowed are as described for the fg zle_highlight attribute;
see Character Highlighting in zshzle(1). This means that numeric colours are allowed in the sec‐
ond format also.

%K (%k)
Start (stop) using a different bacKground colour. The syntax is identical to that for %F and %f.

%{...%}
Include a string as a literal escape sequence. The string within the braces should not change the cursor
position. Brace pairs can nest.

A positive numeric argument between the % and the { is treated as described for %G below.

%G Within a %{...%} sequence, include a ‘glitch': that is, assume that a single character width will be out‐
put. This is useful when outputting characters that otherwise cannot be correctly handled by the shell,
such as the alternate character set on some terminals. The characters in question can be included within a
%{...%} sequence together with the appropriate number of %G sequences to indicate the correct width. An
integer between the ‘%' and ‘G' indicates a character width other than one. Hence %{seq%2G%} outputs seq
and assumes it takes up the width of two standard characters.

Multiple uses of %G accumulate in the obvious fashion; the position of the %G is unimportant. Negative in‐
tegers are not handled.

Note that when prompt truncation is in use it is advisable to divide up output into single characters
within each %{...%} group so that the correct truncation point can be found.

CONDITIONAL SUBSTRINGS IN PROMPTS
%v The value of the first element of the psvar array parameter. Following the ‘%' with an integer gives that
element of the array. Negative integers count from the end of the array.

%(x.true-text.false-text)
Specifies a ternary expression. The character following the x is arbitrary; the same character is used to
separate the text for the ‘true' result from that for the ‘false' result. This separator may not appear in
the true-text, except as part of a %-escape sequence. A ‘)' may appear in the false-text as ‘%)'.
true-text and false-text may both contain arbitrarily-nested escape sequences, including further ternary
expressions.

The left parenthesis may be preceded or followed by a positive integer n, which defaults to zero. A nega‐
tive integer will be multiplied by -1, except as noted below for ‘l'. The test character x may be any of
the following:

! True if the shell is running with privileges.
# True if the effective uid of the current process is n.
? True if the exit status of the last command was n.
_ True if at least n shell constructs were started.
C
/ True if the current absolute path has at least n elements relative to the root directory, hence / is
counted as 0 elements.
c
.
˜ True if the current path, with prefix replacement, has at least n elements relative to the root di‐
rectory, hence / is counted as 0 elements.
D True if the month is equal to n (January = 0).
d True if the day of the month is equal to n.
e True if the evaluation depth is at least n.
g True if the effective gid of the current process is n.
j True if the number of jobs is at least n.
L True if the SHLVL parameter is at least n.
l True if at least n characters have already been printed on the current line. When n is negative,
true if at least abs(n) characters remain before the opposite margin (thus the left margin for
RPROMPT).
S True if the SECONDS parameter is at least n.
T True if the time in hours is equal to n.
t True if the time in minutes is equal to n.
v True if the array psvar has at least n elements.
V True if element n of the array psvar is set and non-empty.
w True if the day of the week is equal to n (Sunday = 0).
