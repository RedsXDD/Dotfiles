#!/usr/bin/env sh

# shellcheck disable=1091,2034,2154
# Pywal delimiter texts.
wallust_header_txt='The following lines were auto generated by wallust_postrun script:'
wallust_footer_txt='EOF_WALLUST'

# Necessary wallust files:
wallust_cache_dir="${XDG_CACHE_HOME:-$HOME/.cache}/wallust"
wallust_oomox_theme_file="${XDG_CONFIG_HOME:-$HOME/.config}/oomox/colors/wallust"
oomox_plugins_dir='/opt/oomox/plugins'
oomox_theme_name='oomox-wallust'

send_notification(){ notify-send -t 3000 'Wallust_postrun' "$1"; }

[ -f "${wallust_cache_dir}/colors.sh" ] && . "${wallust_cache_dir}/colors.sh"

#: Restart processes function {{{
restart_processes(){
	killall waybar cava swaync
	while pgrep -x waybar >/dev/null; do sleep 1; done
	while pgrep -x cava >/dev/null; do sleep 1; done
	while pgrep -x swaync >/dev/null; do sleep 1; done
	waybar >/dev/null &
	swaync >/dev/null &
}
#: }}}
#: Mpv theme {{{
gen_mpv_theme(){
	[ ! -f "$wallust_cache_dir/colors.sh" ] && return 1

	gen_mpv_config_theme(){
		cat <<- MPVEOF
		# $wallust_header_txt

		background-color='$background'
		osd-back-color='$color8'
		osd-border-color='$background'
		osd-color='$foreground'
		osd-shadow-color='$background'

		# $wallust_footer_txt
		MPVEOF
	}

	gen_mpv_stats(){
		cat <<- MPV_STATS_EOF
		# $wallust_header_txt

		# NOTE: Colors are in #BBGGRR format
		border_color=$background
		font_color=$foreground
		plot_bg_border_color=$color11
		plot_bg_color=$background
		plot_color=$color11

		# $wallust_footer_txt
		MPV_STATS_EOF
	}

	mpv_config_dir="${XDG_CONFIG_HOME:-$HOME/.config}/${1:-mpv}"
	mpv_script_opts_dir="${XDG_CONFIG_HOME:-$HOME/.config}/${1:-mpv}/script-opts"
	[ ! -d "$mpv_script_opts_dir" ] && mkdir -vp "$mpv_script_opts_dir"

	# Generate mpv.conf theme.
	tmp_mpv="$(mktemp)"
	[ -f "${mpv_config_dir}/mpv.conf" ] && sed "/$wallust_header_txt/,/$wallust_footer_txt/d" "${mpv_config_dir}/mpv.conf" > "$tmp_mpv"
	gen_mpv_config_theme >> "$tmp_mpv"
	mv -vf "$tmp_mpv" "${mpv_config_dir}/mpv.conf"

	# This creates the stats.conf theme under "$tmp_mpv_stats", and the awk command converts the colors to BBGGRR format.
	tmp_mpv_stats="$(mktemp)"
	trap 'rm -rf "$tmp_mpv_stats"' 0 1 15

	[ -f "${mpv_script_opts_dir}/stats.conf" ] && sed "/$wallust_header_txt/,/$wallust_footer_txt/d" "${mpv_script_opts_dir}/stats.conf" > "$tmp_mpv_stats"
	gen_mpv_stats >> "$tmp_mpv_stats"
	awk 'BEGIN {FS= OFS= "="} $2 ~ /^#[A-Fa-f0-9]{6}$/ {
		a=substr($2,2,2);
		b=substr($2,4,2);
		c=substr($2,6,2);
		$2 = c b a
	} 1' "$tmp_mpv_stats" > "$mpv_script_opts_dir/stats.conf"
}
#: }}}
#: Oomox theming {{{
# Auto generate themix/oomox theme:
gen_oomox_theme(){
	[ ! -f "$wallust_oomox_theme_file" ] && return 1

	send_notification 'Generating Oomox colorscheme ...'

	# NOTE: gtk2 applications do not read themes under .local/share/themes, so the target dir has to be ~/.themes
	oomox-cli \
		--hidpi false \
		--make-opts all \
		--target-dir "${HOME}/.themes" \
		--output "$oomox_theme_name" \
		"$wallust_oomox_theme_file"

	# Generate gtk4 oomox theme:
	gtk4_output_dir="${HOME}/.themes/${oomox_theme_name}/gtk-4.0"
	gtk4_template_file="${oomox_plugins_dir}/base16/templates/gtk4/templates/gtk.mustache"

	[ ! -d "$gtk4_output_dir" ] && mkdir -vp "$gtk4_output_dir"
	[ -f "$gtk4_template_file" ] && themix-base16-cli "$gtk4_template_file" "$wallust_oomox_theme_file" | sed '/^ERROR:/d; /^Import/d' > "${gtk4_output_dir}/gtk.css"

	# Generate QT5/QT6 oomox styleplugin themes:
	qt_output_dir="${XDG_CONFIG_HOME:-$HOME/.config}/oomox-qtstyleplugin/themes"
	qt_template_file="${oomox_plugins_dir}/base16/templates/qt-oomox-styleplugin/templates/default.mustache"

	[ ! -d "$qt_output_dir" ] && mkdir -vp "$qt_output_dir"
	[ -f "$qt_template_file" ] && themix-base16-cli "$qt_template_file" "$wallust_oomox_theme_file" | sed '/^ERROR:/d; /^Import/d' > "${qt_output_dir}/${oomox_theme_name}.css"

	send_notification '✅ Oomox colorscheme generated successfully!'
}

# Auto generate oomox icon theme:
gen_oomox_icon_theme(){
	[ ! -f "$wallust_oomox_theme_file" ] && return 1

	# Main variables:
	icon_theme_name="$1"
	output_name="oomox_wallust_${icon_theme_name}"
	output_dir="${XDG_DATA_HOME:-$HOME/.local/share}/icons/${output_name}"

	send_notification "Generating Oomox icon theme '$(echo "$icon_theme_name" | sed 's/_/ /g')' ..."

	case "$icon_theme_name" in
		'archdroid')    oomox-archdroid-icons-cli    -d "$output_dir" -o "$output_name" "$wallust_oomox_theme_file" || return 1 ;;
		'gnome_colors') oomox-gnome-colors-icons-cli -d "$output_dir" -o "$output_name" "$wallust_oomox_theme_file" || return 1 ;;
		*)
			oomox_plugin_path="${oomox_plugins_dir}/icons_${icon_theme_name}"
			[ -f "${oomox_plugin_path}/change_color.sh" ] &&
				"${oomox_plugin_path}/change_color.sh" \
					-d "$output_dir" \
					-o "$output_name" \
					"$wallust_oomox_theme_file" || return 1
		;;
	esac

	send_notification "✅ Oomox icon theme '$(echo "$icon_theme_name" | sed 's/_/ /g')' generateted successfully!"
}
#: }}}
#: Main function {{{
main(){
	# Auto reload tmux theming:
	[ -n "$TMUX" ] && [ -f "${XDG_CONFIG_HOME:-$HOME/.config/}/tmux/tmux.conf" ] && tmux source-file "${XDG_CONFIG_HOME:-$HOME/.config/}/tmux/tmux.conf"

	# Restart main programs:
	restart_processes

	# Generate main program themes:
	gen_mpv_theme "mpv"
	gen_mpv_theme "mvi"

	# Oomux theme:
	gen_oomox_theme
	gen_oomox_icon_theme 'archdroid'
	gen_oomox_icon_theme 'gnome_colors'
	gen_oomox_icon_theme 'papirus'
	gen_oomox_icon_theme 'numix'
	gen_oomox_icon_theme 'suruplus_aspromauros'
}
main
#: }}}

# vim:fileencoding=utf-8:foldmethod=marker:foldenable
