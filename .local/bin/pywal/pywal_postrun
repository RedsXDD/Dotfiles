#!/usr/bin/env sh

# shellcheck disable=1091,2034,2154
# Global variables:
oomox_theme_name='oomox-pywal'
oomox_plugins_dir='/opt/oomox/plugins'
pywal_cache_dir="${XDG_CACHE_HOME:-$HOME/.cache}/wal"
pywal_oomox_file="${pywal_cache_dir}/colors-oomox"
send_notification(){ notify-send -t 3000 'Pywal_postrun' "$1"; }

[ -f "$pywal_cache_dir/colors.sh" ] && . "$pywal_cache_dir/colors.sh"
#: Restart processes function {{{
restart_processes(){
	killall waybar cava swaync
	while pgrep -x waybar >/dev/null; do sleep 1; done
	while pgrep -x cava >/dev/null; do sleep 1; done
	while pgrep -x swaync >/dev/null; do sleep 1; done
	waybar >/dev/null &
	swaync >/dev/null &
}
#: }}}
#: Gnuplot theme generation {{{
gen_gnuplot_theme(){
	[ ! -f "$pywal_cache_dir/colors.sh" ] && return 1

	gen_theme_config(){
		printf '\n%s\n' '# The following lines were auto generated by pywal_postrun script:'
		cat <<- GNUPLOTEOF
		# Basic configs:
		set isosamples 50
		set hidden3d

		# Key, border & grid colors:
		set grid xtics ytics linetype 1 linewidth 1 linecolor rgb '$foreground'
		set border linewidth 3 linecolor rgb '$color4'
		set key textcolor rgb '$foreground'

		# Labels:
		set xlabel "X axis" textcolor rgb '$foreground'
		set ylabel "Y axis" textcolor rgb '$foreground'
		set zlabel "Z axis" textcolor rgb '$foreground'

		# Set background color:
		set terminal GNUTERM background rgb '$background'
		set object rectangle from screen 0,0 to screen 1,1 behind fillcolor rgb '$background' fillstyle solid noborder

		# Color some lines:
		set linetype 1 linewidth 2 pointtype 6 linecolor rgb '$color5'
		set linetype 2 linewidth 2 pointtype 6 linecolor rgb '$color7'
		set linetype 3 linewidth 2 pointtype 6 linecolor rgb '$color4'
		set linetype 4 linewidth 2 pointtype 6 linecolor rgb '$color6'
		set linetype 5 linewidth 2 pointtype 6 linecolor rgb '$color2'
		set linetype 6 linewidth 2 pointtype 6 linecolor rgb '$color3'
		set linetype 7 linewidth 2 pointtype 6 linecolor rgb '$color1'
		GNUPLOTEOF
	}
	gen_theme_config > "${XDG_CONFIG_HOME:-$HOME/.config}/gnuplot/gnuplotrc"
}
#: }}}
#: Btop theme generation {{{
gen_btop_theme(){
	[ ! -f "$pywal_cache_dir/colors.sh" ] && return 1

	gen_theme_config(){
		printf '\n%s\n' '# The following lines were auto generated by pywal_postrun script:'
		cat <<- BTOPEOF
		# Main background, empty for terminal default, need to be empty if you want transparent background
		theme[main_bg]="$background"

		# Main text color
		theme[main_fg]="$foreground"

		# Title color for boxes
		theme[title]="$foreground"

		# Highlight color for keyboard shortcuts
		theme[hi_fg]="$color8"

		# Background color of selected item in processes box
		theme[selected_bg]="$color5"

		# Foreground color of selected item in processes box
		theme[selected_fg]="$foreground"

		# Color of inactive/disabled text
		theme[inactive_fg]="$color8"

		# Color of text appearing on top of graphs, i.e uptime and current network graph scaling
		theme[graph_text]="$foreground"

		# Background color of the percentage meters
		theme[meter_bg]="$color8"

		# Misc colors for processes box including mini cpu graphs, details memory graph and details status text
		theme[proc_misc]="$color4"

		# Cpu box outline color
		theme[cpu_box]="$color4"

		# Memory/disks box outline color
		theme[mem_box]="$color2"

		# Net up/down box outline color
		theme[net_box]="$color1"

		# Processes box outline color
		theme[proc_box]="$color6"

		# Box divider line and small boxes line color
		theme[div_line]="$color8"

		# Temperature graph colors
		theme[temp_start]="$color4"
		theme[temp_mid]="$color5"
		theme[temp_end]="$color5"

		# CPU graph colors
		theme[cpu_start]="$color4"
		theme[cpu_mid]="$color6"
		theme[cpu_end]="$color2"

		# Mem/Disk free meter
		theme[free_start]="$color13"
		theme[free_mid]="$color5"
		theme[free_end]="$color5"

		# Mem/Disk cached meter
		theme[cached_start]="$color14"
		theme[cached_mid]="$color6"
		theme[cached_end]="$color6"

		# Mem/Disk available meter
		theme[available_start]="$color11"
		theme[available_mid]="$color3"
		theme[available_end]="$color3"

		# Mem/Disk used meter
		theme[used_start]="$color10"
		theme[used_mid]="$color2"
		theme[used_end]="$color2"

		# Download graph colors
		theme[download_start]="$color4"
		theme[download_mid]="$color2"
		theme[download_end]="$color6"

		# Upload graph colors
		theme[upload_start]="$color4"
		theme[upload_mid]="$color5"
		theme[upload_end]="$color5"

		# Process box color gradient for threads, mem and cpu usage
		theme[process_start]="$color2"
		theme[process_mid]="$color10"
		theme[process_end]="$color8"
		BTOPEOF
	}
	gen_theme_config > "${XDG_CONFIG_HOME:-$HOME/.config}/btop/themes/pywal.theme"
}
#: }}}
#: IMV theme generation {{{
gen_imv_theme(){
	[ ! -f "$pywal_cache_dir/colors.sh" ] && return 1

	imv_config="${XDG_CONFIG_HOME:-$HOME/.config}/imv/config"
	tmp="$(mktemp)"
	trap 'rm -rf "$tmp"' 0 1 15
	[ -f "$imv_config" ] && cp "$imv_config" "$tmp"
	sed "s|background =.*|background = ${background###}|g; s|overlay_background_color =.*|overlay_background_color = ${color4###}|g" "$imv_config" > "$tmp"
	mv "$tmp" "$imv_config"
}
#: }}}
#: Fix dolphin background color {{{
gen_dolphin_fix(){
	[ ! -f "$pywal_cache_dir/colors.sh" ] && return 1

	gen_theme_config(){
		printf '\n%s\n' '# The following lines were auto generated by pywal_postrun script:'
		cat <<- DOLPHINEOF
		[Colors:View]
		BackgroundNormal=$background
		DOLPHINEOF
	}
	kdeglobals_file="${XDG_CONFIG_HOME:-$HOME/.config}/kdeglobals"
	tmp="$(mktemp)"
	trap 'rm -rf "$tmp"' 0 1 15
	sed "s/BackgroundNormal=.*/BackgroundNormal=$background/g" "$kdeglobals_file" > "$tmp" && mv "$tmp" "$kdeglobals_file" || gen_theme_config >> "$kdeglobals_file"
}
#: }}}
#: Oomox theming {{{
# Auto generate themix/oomox theme:
gen_oomox_theme(){
	send_notification 'Generating Oomox colorscheme ...'

	oomox_colors_dir="${XDG_CONFIG_HOME:-$HOME/.config}/oomox/colors"
	[ ! -d "$oomox_colors_dir" ] && mkdir -vp "$oomox_colors_dir"
	cp -vf "$pywal_oomox_file" "${oomox_colors_dir}/pywal"
	if [ -f "$pywal_oomox_file" ]; then
		# Setting the hidpi option to true basically doubles the gtk2 icon sizes:
		oomox-cli --hidpi false \
			--make-opts all \
			--target-dir "${XDG_DATA_HOME:-$HOME/.local/share}"/themes \
			--output "$oomox_theme_name" \
			"$pywal_oomox_file"

		gtk4_output_dir="${XDG_DATA_HOME:-$HOME/.local/share}/themes/${oomox_theme_name}/gtk-4.0"
		[ ! -d "$gtk4_output_dir" ] && mkdir -p "$gtk4_output_dir"
		themix-base16-cli "${oomox_plugins_dir}/base16/templates/gtk4/templates/gtk.mustache" "${pywal_cache_dir}/colors-oomox" | sed '/^ERROR:/d; /^Import/d' > "${gtk4_output_dir}/gtk.css"

		# NOTE: gtk2 applications do not read themes under .local/share/themes
		[ ! -d "$HOME/.themes" ] && mkdir -vp "$HOME/.themes"
		[ ! -h "$HOME/.themes/${oomox_theme_name}" ] && ln -sv "${XDG_DATA_HOME:-$HOME/.local/share}/themes/${oomox_theme_name}" "$HOME/.themes/${oomox_theme_name}"

		send_notification '✅ Oomox colorscheme generated successfully!'
	fi
}

# Auto generate oomox qt5/qt6 themes:
gen_oomox_qt_theme(){
	qt_output_dir="${XDG_CONFIG_HOME:-$HOME/.config}/oomox-qtstyleplugin/themes"
	[ ! -d "$qt_output_dir" ] && mkdir -p "$qt_output_dir"

	qt_plugin_file="$oomox_plugins_dir/base16/templates/qt-oomox-styleplugin/templates/default.mustache"
	[ -f "$qt_plugin_file" ] && themix-base16-cli "$qt_plugin_file" "$pywal_oomox_file" | sed '/^ERROR:/d; /^Import/d' > "${qt_output_dir}/${oomox_theme_name}.css"
}

# Auto generate oomox icon theme:
gen_oomox_icon_theme(){
	icon_theme_name="$1"
	oomox_plugin_path="$oomox_plugins_dir/icons_${icon_theme_name}"
	destination_name="oomox_pywal_${icon_theme_name}"

	send_notification "Generating Oomox icon theme '$(echo "$icon_theme_name" | sed 's/_/ /g')' ..."
	if [ -f "$pywal_oomox_file" ]; then
		"$oomox_plugin_path"/change_color.sh \
			-d "${XDG_DATA_HOME:-$HOME/.local/share}/icons/${destination_name}" \
			-o "$destination_name" \
			"$pywal_oomox_file" &&
			send_notification "✅ Oomox icon theme '$(echo "$icon_theme_name" | sed 's/_/ /g')' generateted successfully!"
	fi
}
#: }}}
#: Main function {{{
main(){
	# Auto reload tmux theming:
	[ -n "$TMUX" ] && tmux source-file ~/.config/tmux/tmux.conf

	restart_processes

	gen_gnuplot_theme
	gen_btop_theme
	gen_imv_theme
	gen_dolphin_fix

	# Oomux theme generation:
	gen_oomox_theme &
	gen_oomox_qt_theme &
	gen_oomox_icon_theme 'papirus' &
	gen_oomox_icon_theme 'numix' &
	gen_oomox_icon_theme 'suruplus_aspromauros' &
}
main
#: }}}

# vim:fileencoding=utf-8:foldmethod=marker
